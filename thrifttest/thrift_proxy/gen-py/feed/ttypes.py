#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class LinkMeta:
  """
  Attributes:
   - url
   - freq
   - max_fetch
   - expire
   - depth
   - schedule
   - method
   - retry_num
   - blob
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.I32, 'freq', None, None, ), # 2
    (3, TType.STRING, 'max_fetch', None, None, ), # 3
    (4, TType.STRING, 'expire', None, None, ), # 4
    (5, TType.I32, 'depth', None, None, ), # 5
    (6, TType.STRING, 'schedule', None, None, ), # 6
    (7, TType.STRING, 'method', None, None, ), # 7
    (8, TType.I32, 'retry_num', None, None, ), # 8
    (9, TType.STRING, 'blob', None, None, ), # 9
  )

  def __init__(self, url=None, freq=None, max_fetch=None, expire=None, depth=None, schedule=None, method=None, retry_num=None, blob=None,):
    self.url = url
    self.freq = freq
    self.max_fetch = max_fetch
    self.expire = expire
    self.depth = depth
    self.schedule = schedule
    self.method = method
    self.retry_num = retry_num
    self.blob = blob

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.freq = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.max_fetch = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.expire = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.depth = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.schedule = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.method = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.retry_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.blob = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LinkMeta')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.freq is not None:
      oprot.writeFieldBegin('freq', TType.I32, 2)
      oprot.writeI32(self.freq)
      oprot.writeFieldEnd()
    if self.max_fetch is not None:
      oprot.writeFieldBegin('max_fetch', TType.STRING, 3)
      oprot.writeString(self.max_fetch)
      oprot.writeFieldEnd()
    if self.expire is not None:
      oprot.writeFieldBegin('expire', TType.STRING, 4)
      oprot.writeString(self.expire)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.I32, 5)
      oprot.writeI32(self.depth)
      oprot.writeFieldEnd()
    if self.schedule is not None:
      oprot.writeFieldBegin('schedule', TType.STRING, 6)
      oprot.writeString(self.schedule)
      oprot.writeFieldEnd()
    if self.method is not None:
      oprot.writeFieldBegin('method', TType.STRING, 7)
      oprot.writeString(self.method)
      oprot.writeFieldEnd()
    if self.retry_num is not None:
      oprot.writeFieldBegin('retry_num', TType.I32, 8)
      oprot.writeI32(self.retry_num)
      oprot.writeFieldEnd()
    if self.blob is not None:
      oprot.writeFieldBegin('blob', TType.STRING, 9)
      oprot.writeString(self.blob)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
