/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef student_TYPES_H
#define student_TYPES_H

#include <stdint.h>
#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _Student__isset {
  _Student__isset() : sno(false), sname(false), ssex(false), sage(false) {}
  bool sno;
  bool sname;
  bool ssex;
  bool sage;
} _Student__isset;

class Student {
 public:

  static const char* ascii_fingerprint; // = "457B6E35E5EAAA1DBF18D6B3763BD82E";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x7B,0x6E,0x35,0xE5,0xEA,0xAA,0x1D,0xBF,0x18,0xD6,0xB3,0x76,0x3B,0xD8,0x2E};

  Student() : sno(0), sname(""), ssex(0), sage(0) {
  }

  virtual ~Student() throw() {}

  int32_t sno;
  std::string sname;
  bool ssex;
  int16_t sage;

  _Student__isset __isset;

  void __set_sno(const int32_t val) {
    sno = val;
  }

  void __set_sname(const std::string& val) {
    sname = val;
  }

  void __set_ssex(const bool val) {
    ssex = val;
  }

  void __set_sage(const int16_t val) {
    sage = val;
  }

  bool operator == (const Student & rhs) const
  {
    if (!(sno == rhs.sno))
      return false;
    if (!(sname == rhs.sname))
      return false;
    if (!(ssex == rhs.ssex))
      return false;
    if (!(sage == rhs.sage))
      return false;
    return true;
  }
  bool operator != (const Student &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Student & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
